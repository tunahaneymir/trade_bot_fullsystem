📊 PARÇA 4: RL ARCHITECTURE & SETUP SCORING
🤖 1. RL ARCHITECTURE
1.1 RL Nedir?
Reinforcement Learning (Pekiştirmeli Öğrenme):
Agent (Bot):
├─ Durumu gözlemler (State)
├─ Karar verir (Action)
├─ Sonuç alır (Reward)
└─ Zamanla öğrenir: "Hangi durumda hangi karar en iyisi?"
Bizim Sistemde:
State: Market koşulları, setup kalitesi, performans
Action: Entry yap, skip et, wait et
Reward: Trade sonucu + setup kalitesi + risk yönetimi
1.2 RL Algorithm
PPO (Proximal Policy Optimization)
Neden PPO?
✓ Stabil öğrenme
✓ Trading için uygun
✓ Aşırı değişimi engelliyor
✓ Risk yönetimi iyi
✓ Kanıtlanmış başarı

Alternatifler:
- DQN: Daha basit ama kararsız
- A3C: Karmaşık, çok kaynak gerektirir
- DDPG: Continuous action için iyi
→ PPO en dengeli seçim
1.3 State Space (RL Ne Görüyor?)
STATE_SPACE = {
    
    # ══════════════════════════════════
    # PA SIGNALS (Price Action)
    # ══════════════════════════════════
    'pa_signals': {
        'zone_quality': {
            'range': 0-10,
            'description': 'Zone kalite skoru',
            'weight': 'High importance'
        },
        'zone_thickness': {
            'range': 0.0-1.5,
            'description': 'Zone kalınlığı (%)',
            'weight': 'Medium'
        },
        'zone_touch_count': {
            'range': 2-10,
            'description': 'Zone kaç kez test edildi',
            'weight': 'High'
        },
        'zone_age_days': {
            'range': 0-90,
            'description': 'Zone ne kadar eski (gün)',
            'weight': 'Medium'
        },
        'choch_strength': {
            'range': 0.0-1.0,
            'description': 'ChoCH gücü',
            'weight': 'High importance'
        },
        'fib_level': {
            'values': [0.705, 0.618, 'other'],
            'description': 'Hangi Fibonacci seviyesinde',
            'weight': 'Medium'
        }
    },
    
    # ══════════════════════════════════
    # MARKET CONTEXT
    # ══════════════════════════════════
    'market_context': {
        'trend_strength': {
            'range': 0.0-1.0,
            'description': 'Trend ne kadar güçlü',
            'calculation': 'EMA distance + slope',
            'weight': 'High'
        },
        'atr_percent': {
            'range': 0.0-15.0,
            'description': 'Volatilite seviyesi (%)',
            'weight': 'High'
        },
        'volume_ratio': {
            'range': 0.5-3.0,
            'description': 'Mevcut volume / Ortalama',
            'weight': 'Medium'
        },
        'market_regime': {
            'values': ['trending', 'ranging', 'breakout', 'consolidation'],
            'description': 'Piyasa rejimi',
            'weight': 'High'
        },
        'time_of_day': {
            'range': 0-23,
            'description': 'Gün içinde saat',
            'weight': 'Low (RL öğrenecek)'
        },
        'day_of_week': {
            'range': 0-6,
            'description': 'Haftanın günü',
            'weight': 'Low (RL öğrenecek)'
        }
    },
    
    # ══════════════════════════════════
    # HISTORICAL PERFORMANCE
    # ══════════════════════════════════
    'performance': {
        'pattern_win_rate': {
            'range': 0.0-1.0,
            'description': 'Bu pattern daha önce ne kadar başarılı',
            'calculation': 'Similar setup win rate',
            'weight': 'Very High'
        },
        'zone_win_rate': {
            'range': 0.0-1.0,
            'description': 'Bu zone daha önce ne kadar başarılı',
            'weight': 'High'
        },
        'recent_trades': {
            'type': 'array[-5]',
            'description': 'Son 5 trade PnL',
            'example': '[-2%, +3%, +1%, -1%, +2%]',
            'weight': 'Medium'
        },
        'consecutive_wins': {
            'range': 0-10,
            'description': 'Arka arkaya kaç kazanç',
            'weight': 'Medium'
        },
        'consecutive_losses': {
            'range': 0-10,
            'description': 'Arka arkaya kaç kayıp',
            'weight': 'High (risk indicator)'
        },
        'coin_performance': {
            'range': 0.0-1.0,
            'description': 'Bu coin üzerinde overall performance',
            'weight': 'Medium'
        }
    },
    
    # ══════════════════════════════════
    # RISK METRICS
    # ══════════════════════════════════
    'risk_metrics': {
        'current_drawdown': {
            'range': 0.0-20.0,
            'description': 'Mevcut drawdown (%)',
            'weight': 'Very High'
        },
        'daily_risk_used': {
            'range': 0.0-6.0,
            'description': 'Bugün kullanılan risk (%)',
            'weight': 'High'
        },
        'open_positions_count': {
            'range': 0-4,
            'description': 'Kaç açık pozisyon var',
            'weight': 'Medium'
        },
        'open_positions_risk': {
            'range': 0.0-8.0,
            'description': 'Açık pozisyonların toplam riski (%)',
            'weight': 'High'
        },
        'correlation_exposure': {
            'range': 0.0-1.0,
            'description': 'Correlated coinlerde risk',
            'weight': 'Medium'
        }
    },
    
    # ══════════════════════════════════
    # PSYCHOLOGICAL STATE
    # ══════════════════════════════════
    'psychological': {
        'confidence_level': {
            'range': 0.0-1.0,
            'description': 'Bot güven seviyesi',
            'factors': ['win rate', 'streak', 'drawdown'],
            'weight': 'High'
        },
        'stress_level': {
            'range': 0.0-1.0,
            'description': 'Bot stres seviyesi',
            'factors': ['losses', 'drawdown', 'volatility'],
            'weight': 'High'
        },
        'patience_level': {
            'range': 0.0-1.0,
            'description': 'Bot sabır seviyesi',
            'factors': ['time since last trade', 'missed setups'],
            'weight': 'Medium (FOMO prevention)'
        },
        'time_since_last_trade': {
            'range': 0-1440,
            'description': 'Son trade üzerinden geçen dakika',
            'weight': 'Medium'
        }
    },
    
    # ══════════════════════════════════
    # SETUP QUALITY
    # ══════════════════════════════════
    'setup_quality': {
        'overall_score': {
            'range': 0-100,
            'description': 'Setup quality score (calculated)',
            'weight': 'Very High'
        },
        'is_re_entry': {
            'type': 'boolean',
            'description': 'Re-entry mi yoksa yeni setup mı',
            'weight': 'High'
        },
        're_entry_attempt': {
            'range': 0-2,
            'description': 'Kaçıncı re-entry (0 = first trade)',
            'weight': 'Medium'
        }
    }
}

# Total State Dimensions: ~40 features
1.4 Action Space (RL Ne Yapabilir?)
ACTION_SPACE = {
    
    # ══════════════════════════════════
    # Action 0: ENTER_FULL
    # ══════════════════════════════════
    'ENTER_FULL': {
        'description': 'Full risk ile trade al',
        'risk': '2% (normal)',
        'when_to_use': [
            'Setup score 80+',
            'High confidence',
            'Good recent performance',
            'Pattern proven to work'
        ],
        'conditions': 'All gates must pass'
    },
    
    # ══════════════════════════════════
    # Action 1: ENTER_REDUCED
    # ══════════════════════════════════
    'ENTER_REDUCED': {
        'description': 'Reduced risk ile trade al',
        'risk': '1-1.5% (reduced)',
        'when_to_use': [
            'Setup score 50-79',
            'Medium confidence',
            'After recent loss',
            'Uncertain pattern'
        ],
        'conditions': 'All gates must pass'
    },
    
    # ══════════════════════════════════
    # Action 2: SKIP
    # ══════════════════════════════════
    'SKIP': {
        'description': 'Bu setup\'ı atla',
        'risk': '0%',
        'when_to_use': [
            'Setup score < 50',
            'Low confidence',
            'High stress level',
            'Pattern not working'
        ],
        'reason': 'Setup not good enough'
    },
    
    # ══════════════════════════════════
    # Action 3: WAIT
    # ══════════════════════════════════
    'WAIT': {
        'description': 'Bekle, daha iyi koşullar ara',
        'risk': '0%',
        'when_to_use': [
            'Setup incomplete',
            'Waiting for better entry',
            'Market conditions unstable',
            'Need more confirmation'
        ],
        'reason': 'Conditions not optimal yet'
    }
}

# Total Actions: 4 (Discrete action space)
1.5 Reward Function (Overview)
Basit Açıklama:
Trade sonucu → Reward
├─ Kazandı + iyi setup → Yüksek reward (+150 to +200)
├─ Kazandı + kötü setup → Orta reward (+50 to +100)
├─ Kaybetti + iyi setup → Düşük ceza (-50 to -80)
├─ Kaybetti + kötü setup → Ağır ceza (-150 to -200)
└─ FOMO/Revenge → Ekstra ceza (-80 to -100)

RL öğrenir:
"Hangi durumda hangi kararı verirsem en çok reward alırım?"
Detaylı reward calculation PARÇA 6'da

📊 2. SETUP QUALITY SCORING SYSTEM
2.1 Amaç
Neden Setup Scoring?
Problem:
├─ Tüm setup'lar eşit değil
├─ Bazıları çok güçlü, bazıları zayıf
└─ Nasıl objektif ölçeceğiz?

Çözüm:
├─ Her setup'a 0-100 puan ver
├─ Faktörlere ağırlık ver
├─ Threshold belirle (min 40)
└─ RL öğrensin: Hangi skorlar kazandırıyor?
2.2 Scoring Components
SETUP_QUALITY_COMPONENTS = {
    
    # ══════════════════════════════════
    # 1. ZONE QUALITY (0-30 points)
    # ══════════════════════════════════
    'zone_quality': {
        'weight': '30% (Highest)',
        'max_points': 30,
        
        'scoring': {
            10: 30,  # Perfect zone
            9: 27,
            8: 24,
            7: 20,
            6: 16,
            5: 12,
            4: 8,
            '<4': 0
        },
        
        'rationale': 'Zone kalitesi en önemli faktör'
    },
    
    # ══════════════════════════════════
    # 2. ChoCH STRENGTH (0-20 points)
    # ══════════════════════════════════
    'choch_strength': {
        'weight': '20%',
        'max_points': 20,
        
        'scoring': {
            '0.9+': 20,   # Çok güçlü ChoCH
            '0.8-0.9': 17,
            '0.7-0.8': 14,
            '0.6-0.7': 11,
            '0.5-0.6': 8,
            '0.4-0.5': 5,
            '<0.4': 0
        },
        
        'rationale': 'Güçlü ChoCH = Güçlü momentum'
    },
    
    # ══════════════════════════════════
    # 3. VOLUME CONFIRMATION (0-15 points)
    # ══════════════════════════════════
    'volume': {
        'weight': '15%',
        'max_points': 15,
        
        'scoring': {
            'spike_2x+': 15,    # 2x+ volume spike
            'spike_1.5x': 12,   # 1.5x volume
            'spike_1.2x': 8,    # 1.2x volume
            'normal': 5,        # Normal volume
            'low': 0            # Düşük volume
        },
        
        'calculation': 'current_volume / avg_volume_20',
        'rationale': 'Yüksek volume = Gerçek breakout'
    },
    
    # ══════════════════════════════════
    # 4. FIBONACCI LEVEL (0-10 points)
    # ══════════════════════════════════
    'fibonacci': {
        'weight': '10%',
        'max_points': 10,
        
        'scoring': {
            '0.705': 10,  # Perfect entry (OEP)
            '0.618': 7,   # Good entry (Golden ratio)
            'other': 0    # Fibonacci kullanılmadı
        },
        
        'rationale': '0.705 institutional seviye'
    },
    
    # ══════════════════════════════════
    # 5. MARKET CONDITIONS (0-15 points)
    # ══════════════════════════════════
    'market_conditions': {
        'weight': '15%',
        'max_points': 15,
        
        'scoring': {
            'trending_strong': 15,    # Güçlü trend
            'trending_moderate': 12,  # Orta trend
            'neutral': 8,             # Nötr
            'sideways': 3,            # Yatay (riskli)
            'choppy': 0               # Choppy (çok riskli)
        },
        
        'calculation': '''
        Factors:
        - EMA distance
        - EMA slope
        - ATR level
        - Price action clarity
        ''',
        'rationale': 'Trend olan piyasada daha kolay'
    },
    
    # ══════════════════════════════════
    # 6. TIMING (0-10 points)
    # ══════════════════════════════════
    'timing': {
        'weight': '10%',
        'max_points': 10,
        
        'scoring': {
            'perfect': 10,   # Setup yeni oluştu (0-1 mum)
            'good': 7,       # 1-2 mum önce
            'late': 3,       # 3-5 mum önce
            'too_late': 0    # 5+ mum önce
        },
        
        'measurement': 'Candles since ChoCH + Fib retest',
        'rationale': 'Taze setup daha güvenilir'
    }
}

# TOTAL: 100 points maximum
2.3 Score Calculation Function
def calculate_setup_quality_score(setup_data):
    """
    Setup quality score hesapla (0-100)
    
    Parameters:
    - setup_data: Dict containing all setup information
    
    Returns:
    - score: 0-100
    - breakdown: Detailed scoring
    """
    
    score = 0
    breakdown = {}
    
    # ─────────────────────────────────
    # 1. Zone Quality (0-30)
    # ─────────────────────────────────
    zone_quality = setup_data['zone_quality']  # 0-10
    
    zone_points_map = {
        10: 30, 9: 27, 8: 24, 7: 20,
        6: 16, 5: 12, 4: 8
    }
    
    zone_points = zone_points_map.get(zone_quality, 0)
    score += zone_points
    breakdown['zone_quality'] = zone_points
    
    # ─────────────────────────────────
    # 2. ChoCH Strength (0-20)
    # ─────────────────────────────────
    choch_strength = setup_data['choch_strength']  # 0.0-1.0
    
    if choch_strength >= 0.9:
        choch_points = 20
    elif choch_strength >= 0.8:
        choch_points = 17
    elif choch_strength >= 0.7:
        choch_points = 14
    elif choch_strength >= 0.6:
        choch_points = 11
    elif choch_strength >= 0.5:
        choch_points = 8
    elif choch_strength >= 0.4:
        choch_points = 5
    else:
        choch_points = 0
    
    score += choch_points
    breakdown['choch_strength'] = choch_points
    
    # ─────────────────────────────────
    # 3. Volume Confirmation (0-15)
    # ─────────────────────────────────
    volume_ratio = setup_data['volume_ratio']  # current/avg
    
    if volume_ratio >= 2.0:
        volume_points = 15
    elif volume_ratio >= 1.5:
        volume_points = 12
    elif volume_ratio >= 1.2:
        volume_points = 8
    elif volume_ratio >= 0.8:
        volume_points = 5
    else:
        volume_points = 0
    
    score += volume_points
    breakdown['volume'] = volume_points
    
    # ─────────────────────────────────
    # 4. Fibonacci Level (0-10)
    # ─────────────────────────────────
    fib_level = setup_data['fib_level']  # 0.705, 0.618, or other
    
    if fib_level == 0.705:
        fib_points = 10
    elif fib_level == 0.618:
        fib_points = 7
    else:
        fib_points = 0
    
    score += fib_points
    breakdown['fibonacci'] = fib_points
    
    # ─────────────────────────────────
    # 5. Market Conditions (0-15)
    # ─────────────────────────────────
    market_regime = setup_data['market_regime']
    
    regime_points_map = {
        'trending_strong': 15,
        'trending_moderate': 12,
        'neutral': 8,
        'sideways': 3,
        'choppy': 0
    }
    
    market_points = regime_points_map.get(market_regime, 5)
    score += market_points
    breakdown['market_conditions'] = market_points
    
    # ─────────────────────────────────
    # 6. Timing (0-10)
    # ─────────────────────────────────
    candles_since_setup = setup_data['candles_since_setup']
    
    if candles_since_setup <= 1:
        timing_points = 10  # Perfect
    elif candles_since_setup <= 2:
        timing_points = 7   # Good
    elif candles_since_setup <= 5:
        timing_points = 3   # Late
    else:
        timing_points = 0   # Too late
    
    score += timing_points
    breakdown['timing'] = timing_points
    
    # ─────────────────────────────────
    # FINAL SCORE
    # ─────────────────────────────────
    return {
        'total_score': score,
        'breakdown': breakdown,
        'quality_rating': get_quality_rating(score)
    }

def get_quality_rating(score):
    """
    Score'a göre quality rating
    """
    if score >= 80:
        return 'EXCELLENT'
    elif score >= 65:
        return 'GOOD'
    elif score >= 50:
        return 'ACCEPTABLE'
    elif score >= 40:
        return 'WEAK'
    else:
        return 'POOR'
2.4 Scoring Examples
═════════════════════════════════════════════════════════
ÖRNEK 1: EXCELLENT SETUP (87/100)
═════════════════════════════════════════════════════════
Setup Data:
├─ Zone quality: 9
├─ ChoCH strength: 0.82
├─ Volume ratio: 1.9x
├─ Fib level: 0.705
├─ Market regime: trending_strong
├─ Candles since: 0

Score Calculation:
─────────────────────────────────────────────────────────
Zone Quality 9:        27 points (30 max)
ChoCH 0.82:            17 points (20 max)
Volume 1.9x:           12 points (15 max)
Fib 0.705:             10 points (10 max)
Market trending:       15 points (15 max)
Timing perfect:        10 points (10 max)
─────────────────────────────────────────────────────────
TOTAL:                 87 points
Rating:                EXCELLENT ⭐⭐⭐

Action Recommendation:
└─ ENTER_FULL (2% risk)
   Reason: Very strong setup, all factors aligned

═════════════════════════════════════════════════════════
ÖRNEK 2: GOOD SETUP (68/100)
═════════════════════════════════════════════════════════
Setup Data:
├─ Zone quality: 7
├─ ChoCH strength: 0.68
├─ Volume ratio: 1.3x
├─ Fib level: 0.618
├─ Market regime: trending_moderate
├─ Candles since: 2

Score Calculation:
─────────────────────────────────────────────────────────
Zone Quality 7:        20 points
ChoCH 0.68:            11 points
Volume 1.3x:            8 points
Fib 0.618:              7 points
Market moderate:       12 points
Timing good:            7 points
─────────────────────────────────────────────────────────
TOTAL:                 68 points
Rating:                GOOD ✓

Action Recommendation:
└─ ENTER_FULL or ENTER_REDUCED
   - If confidence high: 2% risk
   - If confidence medium: 1.5% risk

═════════════════════════════════════════════════════════
ÖRNEK 3: WEAK SETUP (43/100)
═════════════════════════════════════════════════════════
Setup Data:
├─ Zone quality: 5
├─ ChoCH strength: 0.52
├─ Volume ratio: 0.9x
├─ Fib level: 0.618
├─ Market regime: neutral
├─ Candles since: 4

Score Calculation:
─────────────────────────────────────────────────────────
Zone Quality 5:        12 points
ChoCH 0.52:             8 points
Volume 0.9x:            5 points
Fib 0.618:              7 points
Market neutral:         8 points
Timing late:            3 points
─────────────────────────────────────────────────────────
TOTAL:                 43 points
Rating:                WEAK ⚠️

Action Recommendation:
└─ ENTER_REDUCED (1% risk) or SKIP
   - Only for learning purposes
   - RL will decide if worth it
   - High chance of skip

═════════════════════════════════════════════════════════
ÖRNEK 4: POOR SETUP (28/100)
═════════════════════════════════════════════════════════
Setup Data:
├─ Zone quality: 4
├─ ChoCH strength: 0.42
├─ Volume ratio: 0.7x (low!)
├─ Fib level: other (none)
├─ Market regime: sideways
├─ Candles since: 7

Score Calculation:
─────────────────────────────────────────────────────────
Zone Quality 4:         8 points
ChoCH 0.42:             5 points
Volume 0.7x:            0 points (too low)
Fib other:              0 points
Market sideways:        3 points
Timing too late:        0 points
─────────────────────────────────────────────────────────
TOTAL:                 16 points (under minimum!)
Rating:                POOR ✗

Action Recommendation:
└─ REJECT (Auto-reject, below 40 threshold)
   Reason: Too many weak factors
   Gate 2 will block this trade

═════════════════════════════════════════════════════════
2.5 Score Thresholds
SCORE_THRESHOLDS = {
    'minimum': 40,      # Gate 2 minimum
    'recommended': 65,  # RL will learn this
    'excellent': 80,    # Premium setups
    
    'actions': {
        '80-100': {
            'rating': 'EXCELLENT',
            'action': 'ENTER_FULL',
            'risk': '2.0-2.5%',
            'confidence': 'Very High'
        },
        '65-79': {
            'rating': 'GOOD',
            'action': 'ENTER_FULL',
            'risk': '2.0%',
            'confidence': 'High'
        },
        '50-64': {
            'rating': 'ACCEPTABLE',
            'action': 'ENTER_REDUCED',
            'risk': '1.5%',
            'confidence': 'Medium'
        },
        '40-49': {
            'rating': 'WEAK',
            'action': 'ENTER_REDUCED or SKIP',
            'risk': '1.0%',
            'confidence': 'Low',
            'note': 'Only for learning'
        },
        '<40': {
            'rating': 'POOR',
            'action': 'AUTO-REJECT',
            'risk': '0%',
            'reason': 'Below minimum threshold'
        }
    }
}

🚪 3. GATE SYSTEM (4-Stage Validation)
3.1 Gate System Overview
Amaç: Multi-layer filtering - Her trade 4 kapıdan geçmeli
Setup → Gate 1 → Gate 2 → Gate 3 → Gate 4 → RL Decision → Trade
        ↓         ↓         ↓         ↓         ↓
     Mandatory  Quality   Risk    Psychological  Final
     Checks     Score    Limits    Checks      Approval
3.2 GATE 1: Mandatory Requirements
GATE_1_MANDATORY = {
    'name': 'Mandatory Requirements',
    'purpose': 'PA setup tam mı?',
    'pass_requirement': 'ALL checks must pass',
    
    'checks': {
        
        # Check 1: Zone Exists
        'zone_exists': {
            'description': 'Valid zone tespit edildi mi?',
            'validation': 'zone is not None',
            'fail_message': 'No valid zone detected'
        },
        
        # Check 2: ChoCH Confirmed
        'choch_confirmed': {
            'description': 'ChoCH oluştu mu?',
            'validation': 'choch.detected == True',
            'additional': 'ChoCH strength >= 0.4',
            'fail_message': 'ChoCH not confirmed or too weak'
        },
        
        # Check 3: Fibonacci Retest
        'fib_retest': {
            'description': 'Fibonacci retest var mı?',
            'validation': 'fib_level in [0.705, 0.618]',
            'fail_message': 'No Fibonacci retest'
        },
        
        # Check 4: Trend Aligned
        'trend_aligned': {
            'description': '4H trend ile uyumlu mu?',
            'validation': '''
            (trend == UPTREND and direction == LONG) or
            (trend == DOWNTREND and direction == SHORT)
            ''',
            'fail_message': 'Trade against trend'
        },
        
        # Check 5: Stop Loss Valid
        'stop_loss_valid': {
            'description': 'Stop loss hesaplanabilir mi?',
            'validation': 'stop_loss is calculated and valid',
            'additional': 'Stop not too wide (>5%)',
            'fail_message': 'Invalid stop loss'
        },
        
        # Check 6: Risk-Reward >= 1.5
        'risk_reward': {
            'description': 'Minimum RR oranı var mı?',
            'validation': 'calculate_rr(entry, stop, tp1) >= 1.5',
            'fail_message': 'Risk-reward ratio too low (<1.5)'
        }
    }
}

def gate_1_check(setup_data):
    """
    Gate 1: Mandatory checks
    """
    results = {}
    
    # Check 1: Zone
    if setup_data.get('zone') is None:
        return {
            'passed': False,
            'failed_at': 'zone_exists',
            'message': 'No valid zone detected'
        }
    results['zone_exists'] = True
    
    # Check 2: ChoCH
    choch = setup_data.get('choch')
    if not choch or not choch.get('detected'):
        return {
            'passed': False,
            'failed_at': 'choch_confirmed',
            'message': 'ChoCH not confirmed'
        }
    if choch.get('strength', 0) < 0.4:
        return {
            'passed': False,
            'failed_at': 'choch_confirmed',
            'message': 'ChoCH too weak (<0.4)'
        }
    results['choch_confirmed'] = True
    
    # Check 3: Fib
    fib_level = setup_data.get('fib_level')
    if fib_level not in [0.705, 0.618]:
        return {
            'passed': False,
            'failed_at': 'fib_retest',
            'message': 'No Fibonacci retest'
        }
    results['fib_retest'] = True
    
    # Check 4: Trend
    trend = setup_data.get('trend')
    direction = setup_data.get('direction')
    
    valid_trend = (
        (trend == 'UPTREND' and direction == 'LONG') or
        (trend == 'DOWNTREND' and direction == 'SHORT')
    )
    
    if not valid_trend:
        return {
            'passed': False,
            'failed_at': 'trend_aligned',
            'message': 'Trade against trend'
        }
    results['trend_aligned'] = True
    
    # Check 5: Stop Loss
    stop_loss = setup_data.get('stop_loss')
    entry = setup_data.get('entry')
    
    if not stop_loss:
        return {
            'passed': False,
            'failed_at': 'stop_loss_valid',
            'message': 'Stop loss not calculated'
        }
    
    # Stop çok geniş değil mi? (>5%)
    risk_percent = abs(entry - stop_loss) / entry * 100
    if risk_percent > 5.0:
        return {
            'passed': False,
            'failed_at': 'stop_loss_valid',
            'message': f'Stop too wide: {risk_percent:.1f}%'
        }
    results['stop_loss_valid'] = True
    
    # Check 6: RR
    tp1 = setup_data.get('tp1')
    rr_ratio = abs(tp1 - entry) / abs(entry - stop_loss)
    
    if rr_ratio < 1.5:
        return {
            'passed': False,
            'failed_at': 'risk_reward',
            'message': f'RR too low: {rr_ratio:.2f}'
        }
    results['risk_reward'] = True
    
    # ALL PASSED!
    return {
        'passed': True,
        'checks': results,
        'message': 'Gate 1 PASSED - All mandatory checks OK'
    }
3.3 GATE 2: Quality Score Check
GATE_2_QUALITY = {
    'name': 'Quality Score Check',
    'purpose': 'Setup kalitesi yeterli mi?',
    'minimum_score': 40,
    
    'validation': {
        'calculate': 'Run setup_quality_score()',
        'threshold': 'score >= 40',
        'components': [
            'Zone quality >= 4',
            'ChoCH strength >= 0.4',
            'Total score >= 40'
        ]
    },
    
    'fail_reasons': {
        '<40': 'Setup quality too low',
        'zone_<4': 'Zone quality below minimum',
        'choch_<0.4': 'ChoCH strength below minimum'
    }
}

def gate_2_check(setup_data):
    """
    Gate 2: Quality score validation
    """
    # Calculate setup quality score
    score_result = calculate_setup_quality_score(setup_data)
    
    total_score = score_result['total_score']
    breakdown = score_result['breakdown']
    
    # Minimum threshold
    if total_score < 40:
        return {
            'passed': False,
            'score': total_score,
            'breakdown': breakdown,
            'message': f'Quality score too low: {total_score}/100'
        }
    
    # Zone quality check
    zone_quality = setup_data.get('zone_quality', 0)
    if zone_quality < 4:
        return {
            'passed': False,
            'score': total_score,
            'breakdown': breakdown,
            'message': f'Zone quality too low: {zone_quality}/10'
        }
    
    # ChoCH strength check
    choch_strength = setup_data.get('choch_strength', 0)
    if choch_strength < 0.4:
        return {
            'passed': False,
            'score': total_score,
            'breakdown': breakdown,
            'message': f'ChoCH too weak: {choch_strength:.2f}'
        }
    
    # PASSED!
    return {
        'passed': True,
        'score': total_score,
        'rating': score_result['quality_rating'],
        'breakdown': breakdown,
        'message': f'Gate 2 PASSED - Score: {total_score}/100'
    }
3.4 GATE 3: Risk Limits Check
GATE_3_RISK_LIMITS = {
    'name': 'Risk Limits Check',
    'purpose': 'Risk limitleri aşılıyor mu?',
    
    'limits': {
        'daily_risk': {
            'max': 6.0,  # %6 max günlük
            'check': 'daily_risk_used < 6.0',
            'fail_message': 'Daily risk limit exceeded'
        },
        
        'coin_cooldown': {
            'check': 'coin not in cooldown',
            'fail_message': 'Coin in cooldown period'
        },
        
        'total_open_risk': {
            'max': 8.0,  # %8 max toplam açık risk
            'check': 'sum(open_positions_risk) < 8.0',
            'fail_message': 'Total open risk too high'
        },
        
        'position_size': {
            'check': 'position_size calculable and valid',
            'fail_message': 'Cannot calculate valid position size'
        },
        
        'correlation': {
            'max_correlated': 2,
            'check': 'correlated_positions < 2',
            'fail_message': 'Too many correlated positions'
        },
        
        'same_direction': {
            'max': 3,
            'check': 'same_direction_count < 3',
            'fail_message': 'Too many positions in same direction'
        }
    }
}

def gate_3_check(setup_data, portfolio_state):
    """
    Gate 3: Risk limits validation
    """
    results = {}
    
    # ─────────────────────────────────
    # Check 1: Daily Risk
    # ─────────────────────────────────
    daily_risk_used = portfolio_state.get('daily_risk_used', 0)
    
    if daily_risk_used >= 6.0:
        return {
            'passed': False,
            'failed_at': 'daily_risk',
            'message': f'Daily limit reached: {daily_risk_used:.1f}%/6%'
        }
    results['daily_risk'] = True
    
    # ─────────────────────────────────
    # Check 2: Coin Cooldown
    # ─────────────────────────────────
    coin = setup_data.get('coin')
    cooldown_state = portfolio_state.get('cooldowns', {})
    
    if coin in cooldown_state:
        cooldown_until = cooldown_state[coin].get('until')
        if datetime.now() < cooldown_until:
            return {
                'passed': False,
                'failed_at': 'coin_cooldown',
                'message': f'{coin} in cooldown until {cooldown_until}'
            }
    results['coin_cooldown'] = True
    
    # ─────────────────────────────────
    # Check 3: Total Open Risk
    # ─────────────────────────────────
    open_positions = portfolio_state.get('open_positions', [])
    total_open_risk = sum([p['risk_percent'] for p in open_positions])
    
    # Yeni trade riski
    new_risk = setup_data.get('risk_percent', 2.0)
    
    if (total_open_risk + new_risk) > 8.0:
        return {
            'passed': False,
            'failed_at': 'total_open_risk',
            'message': f'Total risk would be {total_open_risk + new_risk:.1f}%/8%'
        }
    results['total_open_risk'] = True
    
    # ─────────────────────────────────
    # Check 4: Position Size
    # ─────────────────────────────────
    position_size = setup_data.get('position_size')
    
    if not position_size or position_size <= 0:
        return {
            'passed': False,
            'failed_at': 'position_size',
            'message': 'Invalid position size'
        }
    results['position_size'] = True
    
    # ─────────────────────────────────
    # Check 5: Correlation
    # ─────────────────────────────────
    correlated_positions = count_correlated_positions(
        coin, 
        open_positions
    )
    
    if correlated_positions >= 2:
        return {
            'passed': False,
            'failed_at': 'correlation',
            'message': f'{correlated_positions} correlated positions already open'
        }
    results['correlation'] = True
    
    # ─────────────────────────────────
    # Check 6: Same Direction
    # ─────────────────────────────────
    direction = setup_data.get('direction')
    same_direction_count = count_same_direction(
        direction,
        open_positions
    )
    
    if same_direction_count >= 3:
        return {
            'passed': False,
            'failed_at': 'same_direction',
            'message': f'Already {same_direction_count} {direction} positions'
        }
    results['same_direction'] = True
    
    # ALL PASSED!
    return {
        'passed': True,
        'checks': results,
        'message': 'Gate 3 PASSED - All risk limits OK'
    }
3.5 GATE 4: Psychological Checks
GATE_4_PSYCHOLOGICAL = {
    'name': 'Psychological Checks',
    'purpose': 'Emotional/behavioral red flags var mı?',
    
    'checks': {
        'not_in_cooldown': {
            'description': 'Cooldown aktif değil',
            'check': 'No active cooldown for any reason',
            'fail': 'Cooldown active - wait'
        },
        
        'not_fomo': {
            'description': 'FOMO trade değil',
            'checks': [
                'Setup complete (not rushed)',
                'Not chasing price',
                'Normal entry timing',
                'All conditions met'
            ],
            'fail': 'FOMO detected - setup incomplete/rushed'
        },
        
        'not_revenge': {
            'description': 'Revenge trade değil',
            'checks': [
                'Sufficient time since last loss',
                'Not rapid trading',
                'Quality not degraded',
                'Risk not increased'
            ],
            'fail': 'Revenge trade pattern detected'
        },
        
        'not_overtrading': {
            'description': 'Overtrading değil',
            'checks': [
                'Daily trade count < 5',
                'Coin trade count < 2',
                'Time since last trade > 15 min',
                'Quality maintained'
            ],
            'fail': 'Overtrading pattern detected'
        },
        
        'emotional_state_ok': {
            'description': 'Bot emotional state iyi',
            'checks': [
                'Confidence > 0.3',
                'Stress < 0.7',
                'Patience > 0.2'
            ],
            'fail': 'Poor emotional state'
        }
    }
}

def gate_4_check(setup_data, bot_state, trade_history):
    """
    Gate 4: Psychological validation
    """
    results = {}
    
    # ─────────────────────────────────
    # Check 1: Cooldown
    # ─────────────────────────────────
    if bot_state.get('global_cooldown_active'):
        return {
            'passed': False,
            'failed_at': 'cooldown',
            'message': 'Global cooldown active'
        }
    results['not_in_cooldown'] = True
    
    # ─────────────────────────────────
    # Check 2: FOMO Detection
    # ─────────────────────────────────
    fomo_detected = detect_fomo(setup_data, bot_state)
    
    if fomo_detected['is_fomo']:
        return {
            'passed': False,
            'failed_at': 'fomo',
            'message': fomo_detected['reason']
        }
    results['not_fomo'] = True
    
    # ─────────────────────────────────
    # Check 3: Revenge Trade
    # ─────────────────────────────────
    revenge_detected = detect_revenge_trade(
        setup_data,
        trade_history
    )
    
    if revenge_detected['is_revenge']:
        return {
            'passed': False,
            'failed_at': 'revenge',
            'message': revenge_detected['reason']
        }
    results['not_revenge'] = True
    
    # ─────────────────────────────────
    # Check 4: Overtrading
    # ─────────────────────────────────
    overtrading_detected = detect_overtrading(
        setup_data,
        trade_history
    )
    
    if overtrading_detected['is_overtrading']:
        return {
            'passed': False,
            'failed_at': 'overtrading',
            'message': overtrading_detected['reason']
        }
    results['not_overtrading'] = True
    
    # ─────────────────────────────────
    # Check 5: Emotional State
    # ─────────────────────────────────
    confidence = bot_state.get('confidence', 0.5)
    stress = bot_state.get('stress', 0.0)
    patience = bot_state.get('patience', 1.0)
    
    if confidence < 0.3:
        return {
            'passed': False,
            'failed_at': 'emotional_state',
            'message': f'Low confidence: {confidence:.2f}'
        }
    
    if stress > 0.7:
        return {
            'passed': False,
            'failed_at': 'emotional_state',
            'message': f'High stress: {stress:.2f}'
        }
    
    if patience < 0.2:
        return {
            'passed': False,
            'failed_at': 'emotional_state',
            'message': f'Low patience (FOMO risk): {patience:.2f}'
        }
    
    results['emotional_state_ok'] = True
    
    # ALL PASSED!
    return {
        'passed': True,
        'checks': results,
        'message': 'Gate 4 PASSED - Psychological state OK'
    }
3.6 Complete Gate System Flow
def run_gate_system(setup_data, portfolio_state, bot_state, trade_history):
    """
    Complete 4-gate validation system
    """
    
    # ═══════════════════════════════════
    # GATE 1: Mandatory Requirements
    # ═══════════════════════════════════
    gate1_result = gate_1_check(setup_data)
    
    if not gate1_result['passed']:
        return {
            'approved': False,
            'failed_at': 'GATE_1',
            'reason': gate1_result['message'],
            'details': gate1_result
        }
    
    # ═══════════════════════════════════
    # GATE 2: Quality Score
    # ═══════════════════════════════════
    gate2_result = gate_2_check(setup_data)
    
    if not gate2_result['passed']:
        return {
            'approved': False,
            'failed_at': 'GATE_2',
            'reason': gate2_result['message'],
            'score': gate2_result['score'],
            'details': gate2_result
        }
    
    # ═══════════════════════════════════
    # GATE 3: Risk Limits
    # ═══════════════════════════════════
    gate3_result = gate_3_check(setup_data, portfolio_state)
    
    if not gate3_result['passed']:
        return {
            'approved': False,
            'failed_at': 'GATE_3',
            'reason': gate3_result['message'],
            'details': gate3_result
        }
    
    # ═══════════════════════════════════
    # GATE 4: Psychological
    # ═══════════════════════════════════
    gate4_result = gate_4_check(
        setup_data,
        bot_state,
        trade_history
    )
    
    if not gate4_result['passed']:
        return {
            'approved': False,
            'failed_at': 'GATE_4',
            'reason': gate4_result['message'],
            'details': gate4_result
        }
    
    # ═══════════════════════════════════
    # ALL GATES PASSED! ✓
    # ═══════════════════════════════════
    return {
        'approved': True,
        'message': 'All 4 gates passed - Ready for RL decision',
        'setup_score': gate2_result['score'],
        'setup_rating': gate2_result['rating'],
        'gate_details': {
            'gate1': gate1_result,
            'gate2': gate2_result,
            'gate3': gate3_result,
            'gate4': gate4_result
        }
    }
3.7 Gate System Example
═════════════════════════════════════════════════════════
ÖRNEK: COMPLETE GATE VALIDATION
═════════════════════════════════════════════════════════

Setup:
├─ Coin: BTCUSDT
├─ Zone quality: 8
├─ ChoCH strength: 0.75
├─ Fib level: 0.705
├─ Entry: $50,050
├─ Stop: $49,750
├─ TP1: $50,500

─────────────────────────────────────────────────────────

GATE 1: MANDATORY REQUIREMENTS
─────────────────────────────────────────────────────────
✓ Zone exists: Yes (Zone $50,000-$50,100)
✓ ChoCH confirmed: Yes (strength 0.75)
✓ Fib retest: Yes (0.705 touched)
✓ Trend aligned: Yes (UPTREND + LONG)
✓ Stop loss valid: Yes ($49,750, 0.6% risk)
✓ Risk-reward: Yes (RR 1.5)

Result: GATE 1 PASSED ✓

─────────────────────────────────────────────────────────

GATE 2: QUALITY SCORE
─────────────────────────────────────────────────────────
Score Calculation:
├─ Zone quality 8: 24 points
├─ ChoCH 0.75: 14 points
├─ Volume 1.6x: 12 points
├─ Fib 0.705: 10 points
├─ Market trending: 15 points
└─ Timing perfect: 10 points

Total Score: 85/100
Rating: EXCELLENT

✓ Score >= 40: Yes (85)
✓ Zone >= 4: Yes (8)
✓ ChoCH >= 0.4: Yes (0.75)

Result: GATE 2 PASSED ✓

─────────────────────────────────────────────────────────

GATE 3: RISK LIMITS
─────────────────────────────────────────────────────────
✓ Daily risk: 2.5%/6% (OK)
✓ Coin cooldown: None (OK)
✓ Total open risk: 4%/8% (OK, will be 6% after)
✓ Position size: 0.5 BTC (valid)
✓ Correlation: 0 correlated positions (OK)
✓ Same direction: 1 LONG position (OK, max 3)

Result: GATE 3 PASSED ✓

─────────────────────────────────────────────────────────

GATE 4: PSYCHOLOGICAL
─────────────────────────────────────────────────────────
✓ Not in cooldown: No active cooldown
✓ Not FOMO: Setup complete, normal timing
✓ Not revenge: Last trade 45 min ago, was win
✓ Not overtrading: 2 trades today (max 5)
✓ Emotional state:
  ├─ Confidence: 0.75 (good)
  ├─ Stress: 0.25 (low)
  └─ Patience: 0.80 (high)

Result: GATE 4 PASSED ✓

─────────────────────────────────────────────────────────

FINAL RESULT: ALL GATES PASSED ✓✓✓✓
─────────────────────────────────────────────────────────
Setup Score: 85/100 (EXCELLENT)
Gates: 4/4 passed
Status: APPROVED - Ready for RL decision

Next: Send to RL for final approval

═════════════════════════════════════════════════════════

✅ PARÇA 4 ÖZET
Bu parçada öğrendiklerimiz:
1. RL Architecture
	•	✅ State Space (~40 features)
	◦	PA signals
	◦	Market context
	◦	Performance history
	◦	Risk metrics
	◦	Psychological state
	•	✅ Action Space (4 actions)
	◦	ENTER_FULL
	◦	ENTER_REDUCED
	◦	SKIP
	◦	WAIT
	•	✅ Reward Function (Overview)
2. Setup Quality Scoring (0-100)
	•	✅ 6 components
	◦	Zone quality (30 points)
	◦	ChoCH strength (20 points)
	◦	Volume (15 points)
	◦	Fibonacci (10 points)
	◦	Market conditions (15 points)
	◦	Timing (10 points)
	•	✅ Thresholds (40 min, 65 recommended, 80 excellent)
	•	✅ Calculation examples
3. Gate System (4 stages)
	•	✅ Gate 1: Mandatory (PA setup tam mı?)
	•	✅ Gate 2: Quality (Score >= 40?)
	•	✅ Gate 3: Risk Limits (Limitler OK?)
	•	✅ Gate 4: Psychological (FOMO/Revenge?)
	•	✅ Complete validation flow

Sırada: PARÇA 5 - Risk Management (Position sizing, Risk limits, Correlation control)
Devam edelim mi? 🚀
